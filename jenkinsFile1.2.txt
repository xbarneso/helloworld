pipeline {
    agent none
    stages {

        stage('Get Code') {
            agent any
            steps {
                echo 'Traemos el code'
                git 'https://github.com/xbarneso/helloworld.git'
                bat 'dir'
                stash name: 'codeGit', includes: '**/*'
                echo WORKSPACE
            }
        }

        stage('Unit') {
            agent { label 'agent3' }
            steps {
                unstash 'codeGit'
                bat 'whoami'
                bat 'hostname'
                bat '''
                    set PYTHONPATH=%WORKSPACE%
                    pytest --junitxml=result-unit.xml test\\unit
                '''
            }
        }

        stage('Flask') {
            agent { label 'agent3' }
            steps {
                bat 'whoami'
                bat 'hostname'
                unstash 'codeGit'
                bat '''
                    set FLASK_APP=app\\api.py
                    set FLASK_ENV=development
                    set PYTHONPATH=%WORKSPACE%
                    
                    start "Flask" python -m flask run --port=5000 > flask.log 2>&1
                    
                    start java -jar C:\\ProgramData\\Jenkins\\.jenkins\\workspace\\P25\\unir1\\test\\wiremock\\wiremock-standalone-4.0.0-beta.2.jar --port 9090 --root-dir > wiremock.log 2>&1
                    
                    pytest --junitxml=result-unit.xml test\\unit
                '''
            }
        }

        stage('cobertura') {
            agent { label 'agent3' }
            steps {
                catchError(buildResult: 'SUCCESS', stageResult: 'UNSTABLE') {
                    bat '''
                        set PYTHONPATH=. 
                        coverage run --branch --source=app --omit=app\\__init__.py,app\\api.py -m pytest --junitxml=result-unit.xml test\\unit
                        coverage xml
                    '''
                    cobertura coberturaReportFile: 'coverage.xml', 
                              conditionalCoverageTargets: '90,80,0', 
                              lineCoverageTargets: '100,85,95'
                }
            }
        }
        
        stage('static') {
            agent { label 'agent3' }
            steps {
                bat '''
                    flake8 --exit-zero --format=pylint app >flake8.out
                '''
                recordIssues tools: [flake8(name: 'Flake8', pattern: 'flake8.out')],qualityGates: [[threshold: 80, type: 'TOTAL', unstable: true],[threshold: 100, type: 'TOTAL', unhealthy: true]]
                //recordIssues tools: [flake8(name: 'Flake8', pattern: 'flake8.out')],qualityGates: [[threshold: 8, type: 'TOTAL', unstable: true],[threshold: 10, type: 'TOTAL', unhealthy: true]]
            }
        }
        
        stage('security') {
            agent { label 'agent3' }
            steps {
                bat '''
                    bandit --exit-zero -r . -f custom -o bandit.out --msg-template "{abspath}:{line}: [{test_id}] {msg}"
                '''
                //recordIssues tools: [pyLint(name: 'Bandit', pattern: 'bandit.out')],qualityGates: [[threshold: 1, type: 'TOTAL', unstable: true],[threshold: 2, type: 'TOTAL', unhealthy: true]]
                recordIssues tools: [pyLint(name: 'Bandit', pattern: 'bandit.out')],qualityGates: [[threshold: 5, type: 'TOTAL', unstable: true],[threshold: 8, type: 'TOTAL', unhealthy: true]]
            }
        }
        stage('Performance') {
            agent { label 'agent3' }
            steps {
                bat '''
                    "C:\\ProgramData\\jmeter\\apache-jmeter-5.6.3\\bin\\jmeter.bat" -n -t test\\jmeter\\flask.jmx -f -l flask.jtl
                '''
                perfReport sourceDataFiles: 'flask.jtl'
            }
        }
        

    }
}
